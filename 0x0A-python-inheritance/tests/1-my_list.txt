1-my_list module tests

Retrieve the function:
    >>> MyList = __import__('1-my_list').MyList

    Begin testing:

Good Examples:

::

    >>> MyList([9, 2, 5]).print_sorted()
    [2, 5, 9]

Printing in ascending sort

::

    >>> MyList(["Chicken", "Jerry?", "Gary!"]).print_sorted()
    ['Chicken', 'Gary!', 'Jerry?']

Empty List FTW

::

    >>> MyList([]).print_sorted()
    []

Making sure base list methods are inherited

::

    >>> new_list = MyList()
    >>> new_list.append('Head')
    >>> new_list.append('Chicken')
    >>> print(new_list)
    ['Head', 'Chicken']
    >>> new_list.print_sorted()
    ['Chicken', 'Head']

Checking instances for same type as OG Object

::

    >>> dos_list = MyList()
    >>> type(dos_list)
    <class '1-my_list.MyList'>

Bad Examples:

Class methods not set to take args other than self

::

    >>> MyList([9, 6, 4]).print_sorted('n')
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

Cannot sort different data types

::

    >>> MyList(['e', 3, 't']).print_sorted()
    Traceback (most recent call last):
    TypeError: '<' not supported between instances of 'int' and 'str'

Only one list

::

    >>> MyList([6, 7], [8, 9]).print_sorted()
    Traceback (most recent call last):
    TypeError: list expected at most 1 argument, got 2

Can't sort what isn't there

::

    >>> MyList(None).print_sorted()
    Traceback (most recent call last):
    TypeError: 'NoneType' object is not iterable
